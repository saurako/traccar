<?xml version='1.0' encoding='UTF-8'?>

<!DOCTYPE properties SYSTEM 'http://java.sun.com/dtd/properties.dtd'>

<properties>

    <!-- SERVER CONFIG -->

    <entry key='web.origin'>*</entry>
    <entry key='web.enable'>true</entry>
    <entry key='web.port'>8082</entry>
    <entry key='web.path'>./web</entry>
    <entry key='web.cacheControl'>max-age=3600,public</entry>

    <entry key='geocoder.enable'>true</entry>
    <entry key='geocoder.type'>google</entry>

    <entry key='logger.enable'>true</entry>
    <entry key='logger.level'>all</entry>
    <entry key='logger.file'>./logs/tracker-server.log</entry>

    <entry key='filter.enable'>true</entry>
    <entry key='filter.future'>3600</entry>

    <entry key='event.enable'>true</entry>
    <entry key='event.ignoreDuplicateAlerts'>true</entry>
    <entry key='processing.computedAttributes.enable'>true</entry>

    <entry key='media.path'>./media</entry>

    <entry key='commands.queueing'>true</entry>

    <!-- DATABASE CONFIG -->

    <entry key='database.ignoreUnknown'>true</entry>

    <entry key='database.generateQueries'>true</entry>

    <entry key='database.changelog'>./schema/changelog-master.xml</entry>
 
    <entry key='database.loginUser'>
        SELECT * FROM users
        WHERE email = :email OR login = :email
    </entry>

    <entry key='database.selectPositions'>
        SELECT * FROM positions WHERE deviceId = :deviceId AND fixTime BETWEEN :from AND :to ORDER BY fixTime
    </entry>


    <entry key='database.positionsForRouteSinceLastFill'>
        SELECT deviceid, fixtime as devicetime, latitude, longitude, speed, course, attributes
        FROM positions
        WHERE deviceId = :deviceId
        AND id >= (
        SELECT positionid
        FROM events
        WHERE deviceid = :deviceId
        AND type = 'fuelFill'
        order by id desc
        limit 1
        )
        AND fixTime BETWEEN :from AND :to
        AND valid = true
        ORDER BY fixTime
    </entry>

    <entry key='database.selectPositionsForFuel'>
        SELECT deviceid, fixtime as devicetime, attributes
        FROM positions
        WHERE deviceId = :deviceId
        AND fixTime BETWEEN :from AND :to
        ORDER BY fixTime
    </entry>

    <entry key='database.selectPositionsForRoute'>
        SELECT deviceid, fixtime as devicetime, latitude, longitude, speed, course, attributes
        FROM positions
        WHERE deviceId = :deviceId
        AND fixTime BETWEEN :from AND :to
        AND valid = true
        ORDER BY fixTime
    </entry>

    <entry key="database.getLastFillPosition">
        SELECT *
        FROM events
        WHERE deviceid = :deviceId
        AND type = 'fuelFill'
        AND JSON_EXTRACT(attributes, "$.volume") > 20
        order by id desc
        limit 1
    </entry>

    <entry key='database.selectPositionsForFuelSinceLastFill'>
        SELECT deviceid, fixtime as devicetime, attributes
        FROM positions
        WHERE deviceId = :deviceId
        AND id >= (
            SELECT positionid
            FROM events
            WHERE deviceid = :deviceId
            AND type = 'fuelFill'
            order by id desc
            limit 1
        )
        AND fixTime BETWEEN :from AND :to
        ORDER BY fixTime
    </entry>

    <entry key='database.selectPeripheralSensors'>
        SELECT p.id AS peripheralSensorId, d.id AS deviceId, dt.typename as typeName, p.calibrationdata as calibrationData, p.attributes as attributes
        FROM peripheralsensors AS p
        JOIN peripheralsensortypes AS dt ON p.sensortypeid = dt.id
        JOIN device_peripheralsensors AS dp ON p.id = dp.peripheralsensorid
        JOIN devices AS d ON dp.deviceid = d.id;
    </entry>

    <entry key="database.getLastPositionBefore">
        SELECT *
        FROM positions AS p
        WHERE p.fixtime &lt; :fixtime
        ORDER BY p.fixtime desc
        LIMIT 1
    </entry>

    <entry key="database.getLastValidPosition">
        SELECT *
        FROM positions AS p
        where deviceid = :deviceId
        and valid = 1
        order by fixtime desc
        limit 1
    </entry>

    <entry key='database.selectPositionsForSummary'>
        SELECT a.*
        FROM positions AS a,
        (
            SELECT MIN(id) AS mini, MAX(id) AS maxi
            FROM positions
            WHERE deviceId = :deviceId
            AND attributes NOT LIKE :unitsFilter
            AND fixTime BETWEEN :from AND :to
            ORDER BY fixtime
        ) AS m
        WHERE  m.maxi = a.id
        OR m.mini = a.id
        ORDER BY a.id
    </entry>

    <entry key='database.positionsSinceLastFill'>
        SELECT a.*
        FROM positions AS a,
        (
        SELECT
        (
            SELECT positionid
            FROM events
            WHERE deviceid = :deviceId
            AND type = 'fuelFill'
            order by id desc
            limit 1
        ) AS mini,
        MAX(id) AS maxi
        FROM positions
        WHERE deviceId = :deviceId
        AND attributes NOT LIKE :unitsFilter
        AND fixTime BETWEEN :from AND :to
        ORDER BY fixtime
        ) AS m
        WHERE  m.maxi = a.id
        OR m.mini = a.id
        ORDER BY a.id
    </entry>

    <entry key="database.getDevicePositionProtocol">
        SELECT protocol
        FROM positions
        WHERE deviceId = :deviceId
        ORDER BY id DESC
        LIMIT 1
    </entry>

    <entry key='database.selectFCMPushNotificationsByUserId'>
        SELECT deviceId, eventTypeId, enabled FROM fcmpushnotifications WHERE userId = :userId
    </entry>

    <entry key="database.insertFCMPushNotification">
        INSERT INTO fcmPushNotifications(deviceId, userId, eventTypeId, enabled)
        VALUES (:deviceId, :userId, :eventTypeId, :enabled)
        ON DUPLICATE KEY UPDATE enabled = :enabled
    </entry>

    <entry key="database.insertFCMUserToken">
        INSERT INTO FCMUserTokens(userId, clientToken)
        VALUES (:userId, :clientToken)
        ON DUPLICATE KEY UPDATE clientToken = :clientToken
    </entry>

    <entry key='database.selectLatestPositions'>
        SELECT p.*
        FROM positions p
        INNER JOIN devices d ON p.id = d.positionid
        ORDER BY p.fixtime;
    </entry>

    <entry key='database.selectLatestPositionsForProtocol'>
        SELECT p.*
        FROM positions p
        INNER JOIN devices d ON p.id = d.positionid
        WHERE p.protocol = :protocol
        ORDER BY p.fixtime;
    </entry>

    <entry key='database.updateLatestPosition'>
        UPDATE devices SET positionId = :id WHERE id = :deviceId
    </entry>

    <entry key='database.selectEvents'>
        SELECT * FROM events WHERE deviceId = :deviceId AND devicetime BETWEEN :from AND :to ORDER BY serverTime
    </entry>

    <entry key='database.selectEventsSinceLastFill'>
        SELECT *
        FROM events
        WHERE deviceId = :deviceId
        AND id >= (
            SELECT id
            FROM events
            WHERE deviceid = :deviceId
            AND type = 'fuelFill'
            order by id desc
            limit 1
        )
        AND devicetime BETWEEN :from AND :to ORDER BY devicetime
        AND JSON_EXTRACT(attributes, "$.volume") > 20
    </entry>

    <entry key='database.deletePositions'>
        DELETE FROM positions WHERE serverTime &lt; :serverTime AND id NOT IN (SELECT positionId FROM devices WHERE positionId IS NOT NULL)
    </entry>

    <entry key='database.deleteEvents'>
        DELETE FROM events WHERE serverTime &lt; :serverTime
    </entry>

    <entry key='database.selectStatistics'>
        SELECT * FROM statistics WHERE captureTime BETWEEN :from AND :to ORDER BY captureTime
    </entry>
</properties>
